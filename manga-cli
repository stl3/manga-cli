#!/bin/bash

version="1.0.0"
old_ifs="${IFS}"
cache_dir="${HOME}/.cache/manga-cli"
dependencies=("cat" "curl" "sed" "awk" "tr" "du" "git" "diff" "patch" "zathura" "img2pdf")
github_source="https://raw.githubusercontent.com/7USTIN/manga-cli/master/manga-cli"
# Do not retain files except for session
trap "rm -dRf ${cache_dir}/${mod_manga_title}" INT TERM EXIT
# Text colors
red="\033[1;31m"
green="\033[1;32m"
blue="\033[1;34m"
no_color="\033[0m"

#########################
# Text output functions #
#########################

print_green() {
	printf "${green}%s${no_color}\n" "${*}"
}

print_blue() {
	printf "${blue}%s${no_color}\n" "${*}"
}

print_red() {
	printf "${red}%s${no_color}\n" "${*}" >&2
}

print_list_item() {
	printf "${blue}%s${no_color} ${no_color}%s${no_color}\n" "[${1}]" "${2}"
}

prompt() {
	printf "${green}%s${no_color} ${blue}%s${no_color}" "${1}" "${2}"
	read -r reply
}

######################
# Auxilary functions #
######################

show_help() {
	while IFS= read -r line; do
		printf "%s\n" "${line}"
	done <<-EOF
	
	manga-cli ${version} ( github.com/7USTIN/manga-cli )

	A Bash script for reading mangas via the terminal

	Usage:
	  $0 [Option] [Manga Name]

	Options:
	  -h, --help		Print this help page
	  -V, --version		Print version number
	  -u, --update		Fetch latest version from the Github repository
	  -l, --last-session	Open last session
	  -c, --cache-size	Print cache size (${cache_dir})
	  -C, --clear-cache	Clear cache (${cache_dir})

	EOF
}

show_version() {
	print_green "Version: ${version}"
}

unknown_option() {
	print_red "ERROR: Unknown option '${*}'"
}

open_pdf() {
	zathura --page=1 --mode="fullscreen" "${pdf_dir}" &
}

check_number_input() {
	min_num="${1}"
	max_num="${2}"
	input_num="${3}"

	if 	[[ ${input_num} -ge ${min_num} ]] &&
		[[ ${input_num} -le ${max_num} ]]	
	then
		return 1
	else
		print_red "Invalid selection"
		printf "\n"
		return 0
	fi
}

reset_ifs() {
	IFS="${old_ifs}"
}

###################
# Cache functions #
###################

show_cache_size() {
	if [[ ! -d "${cache_dir}" ]]; then
		mkdir --parents "${cache_dir}"
	fi

	cache_size="$(du -sh "${cache_dir}" | awk '{print $1}')"

	print_green "Cache size: ${cache_size} (${cache_dir})"
}

clear_cache() {
	show_cache_size

	prompt "Proceed with clearing the cache?" "[Y/N]: "
	user_input="$(printf "%s" "${reply}" | tr "[:upper:]" "[:lower:]")"

	if [[ "${user_input}" == "y" ]]; then
		rm -r "${cache_dir:?}/"
		print_green "Cache successfully cleared"
	fi
}

cache_session() {
	printf '%s\n' \
		"${mod_manga_title}" "${selected_chapter_num}" "${chapter_urls[*]}" > \
		"${cache_dir}/session"
}

open_last_session() {
	if [[ ! -f "${cache_dir}/session" ]]; then
		print_red "ERROR: Session file not found"
	else
		session=($(cat "${cache_dir}/session"))
		
		mod_manga_title="${session[0]}"
		unset "session[0]"

		selected_chapter_num=${session[1]}
		unset "session[1]"

		manga_title="$(printf "%s" "${mod_manga_title}" | tr "_" " ")"
		chapter_urls=("${session[@]}")
		chapter_count=${#chapter_urls[@]}
		chapter_url="${chapter_urls[${selected_chapter_num} - 1]}"

		open_chapter
		input_controls
	fi
}

####################
# Select functions #
####################

select_manga() {
	if [[ ${scraped_manga_count} -gt 1 ]]; then
		prompt "Select manga" "[1-${scraped_manga_count}]: "
		selected_manga_num=${reply}
	else
		print_green "Selected '${result_titles[0]}'"
		selected_manga_num=1
	fi

	check_number_input 1 "${scraped_manga_count}" "${selected_manga_num}"

	if [[ "${?}" == "0" ]]; then
		select_manga
	else
		manga_url="${result_urls[${selected_manga_num} - 1]}"
	fi

    manga_title=$(echo "${result_titles[${selected_manga_num} - 1]}" | tr -d ' ')
}

select_chapter() {
    local latest_chapter=$(get_chapter "${manga_title}")
    printf "${green}Latested read chapter:${no_color} ${blue}${latest_chapter}${no_color}\n"

	if [[ ${chapter_count} -gt 1 ]]; then
		prompt "Select chapter" "[1-${chapter_count}]: "
		selected_chapter_num=${reply}
	else
		print_green "Selected first chapter"	
		selected_chapter_num=1
	fi

	check_number_input "1" "${chapter_count}" "${selected_chapter_num}"

	if [[ "${?}" == "0" ]]; then
		select_chapter
	else
		chapter_url="${chapter_urls[${selected_chapter_num} - 1]}"
	fi

    set_chapter ${manga_title} ${selected_chapter_num}
}

####################
# Scrape functions #
####################

scrape_mangas() {
	search_query="$(printf "%s" "${manga_title_input}" | tr " -" "_")"
	
	scraped_results=$(
		curl --silent "https://manganato.com/search/story/${search_query}" |
		sed --silent '/panel-search-story/,$p' |
		sed --silent '/clear: both/q;p'
	)
	
	IFS=$'\n'

	result_titles=($(
		printf "%s" "${scraped_results}" |
		awk 'BEGIN{RS="\" />"; FS="alt=\""}NF>1{print $NF}'
	))
	scraped_manga_count="${#result_titles[@]}"

	result_urls=($(
		printf "%s" "${scraped_results}" |
		awk 'BEGIN{RS="\" title="; FS="rel=\"nofollow\" href=\""}NF>1{print $NF}'
	))

	if [ "${scraped_manga_count}" == "0" ]; then
		print_red "No search results found"
		printf "\n"
		manga_title_input=
		main
	else
		printf "\n"
		print_blue "Found ${scraped_manga_count} result(s):"
	
		for ((i = 1; i < scraped_manga_count + 1; i++)); do
			print_list_item "${i}" "${result_titles[${i} - 1]}"
		done

		printf "\n"
	fi
}

scrape_chapter_list() {
	print_green "Fetching chapters..."

	IFS=$'\n'

rev_chapter_urls=($(
		curl --silent "${manga_url}" |
		sed --silent '/row-content-chapter/,$p' |
		sed --silent '/<\/ul>/q;p' |
		awk 'BEGIN{RS="\" title="; FS="<a rel=\"nofollow\" class=\"chapter-name text-nowrap\" href=\""}NF>1{print $NF}'
	))

	chapter_urls=()

	for i in "${rev_chapter_urls[@]}"; do
		chapter_urls=("$i" "${chapter_urls[@]}")
	done

	chapter_count="${#chapter_urls[@]}"

	printf "\e[1A\e[\\"

	if [ "${chapter_count}" == "0" ]; then
		print_red "No chapters found. Exiting..."
		exit 1
	fi
}

scrape_chapter() {
	if [[ -z "${mod_manga_title}" ]]; then
		manga_title="${result_titles[${selected_manga_num} - 1]}"
		mod_manga_title="$(printf "%s" "${manga_title}" | tr " " "_")"
	fi

	image_dir="${cache_dir}/${mod_manga_title}/chapter_${selected_chapter_num}"
	pdf_dir="${cache_dir}/${mod_manga_title}/chapter_${selected_chapter_num}.pdf"
	
	clear
 
	if [[ ! -f "${pdf_dir}" ]]; then
		print_green "Fetching chapter ${selected_chapter_num}..."

		IFS=$'\n'

		chapter_image_links=($(
			curl --silent "${chapter_url}" |
			sed --silent '/container-chapter-reader/,$p' |
			sed --silent '/max-height: 380px/q;p' |
			awk 'BEGIN{RS="\" alt="; FS="src=\""}NF>1{print $NF}'
		))

		printf "\n"
		print_blue "Downloading images..."

		i=0

		for image_src in "${chapter_image_links[@]}"; do
			((i=i + 1))

			curl \
				--silent \
				--create-dirs \
				--header 'Referer: https://readmanganato.com/' \
				--output "${image_dir}/${i}.jpg" \
				"${image_src}" &
		done

		wait
	fi
}

#################################
# Chapter persistency functions #
#################################

get_chapter() {
    local chapter=$(awk "/^${1}/ {print \$NF}" ${chapter_file_path})

    if [ -z "${chapter}" ]; then
        chapter=0
    fi

    echo "${chapter}"
}

set_chapter() {
    local title_no_space="${1// /}"
    local manga_exists=$([ -z $(awk "/^${title_no_space}/" ${chapter_file_path}) ] && echo 0 || echo 1)

    if [ ${manga_exists} -eq 0 ]; then
        echo "${title_no_space} ${2}" >> ${chapter_file_path}
    else
        awk "/^${title_no_space}/{\$NF=\"${2}\"} 1" ${chapter_file_path} > tmp && mv tmp ${chapter_file_path}
    fi
}

###################
# Other functions #
###################

search_manga() {
	if [ -z "${manga_title_input}" ]; then
		prompt "Search manga:"
		manga_title_input="${reply}"
	fi

	print_green "Searching for '${manga_title_input}'..."
}

input_controls() {
	print_blue "[Chapter ${selected_chapter_num}/${chapter_count}] ${manga_title}"
	
	if [[ ${selected_chapter_num} -lt ${chapter_count} ]]; then
		print_list_item "N" "Next chapter"
	fi

	if [[ ${selected_chapter_num} -gt 1 ]]; then	
		print_list_item "P" "Previous chapter"
	fi

	if [[ ${chapter_count} -gt 1 ]]; then
		print_list_item "S" "Select chapter"
	fi
	
	print_list_item "R" "Reopen current chapter"
	print_list_item "A" "Search another manga"
	print_list_item "Q" "Exit"

	printf "\n"
	prompt "Enter input:"
	user_input="$(printf "%s" "${reply}" | tr "[:upper:]" "[:lower:]")"

	case "${user_input}" in
		n)
			((selected_chapter_num=selected_chapter_num + 1))
            set_chapter ${manga_title} ${selected_chapter_num}
			chapter_url="${chapter_urls[${selected_chapter_num} - 1]}"
			open_chapter
			;;
		p)
			((selected_chapter_num=selected_chapter_num - 1))
            set_chapter ${manga_title} ${selected_chapter_num}
			chapter_url="${chapter_urls[${selected_chapter_num} - 1]}"
			open_chapter
			;;
		s)
			select_chapter
			open_chapter
			;;
		r)
			open_pdf
			;;
		a)
			manga_title_input=
			mod_manga_title=
			clear
			main
			return 1
			;;
		q)
			clear
# Do not retain any files except session on exit
			rm -dRf  ${cache_dir}/${mod_manga_title}
			exit 0
			;;
	esac
	
	clear
	input_controls
}

update_script() {
	print_green "Fetching Github repository..."

	changes="$(curl --silent "${github_source}" | diff -u "${0}" -)"

	if [[ -z "${changes}" ]]; then
		print_green "Script is up to date"
	else
		if printf '%s\n' "${changes}" | patch --silent "${0}" -; then
			print_green "Script successfully updated"
		else
			print_red "ERROR: Something went wrong"
		fi
	fi
}

convert_imgs_to_pdf() {
	if [[ ! -f "${pdf_dir}" ]]; then
		print_blue "Converting images to PDF..."
# Remove any .jpg that is 950 bytes (4k / 4096 bytes size on disk) or else pdf will not be generated
# This was caused by an issue in the scrape function where it saved javascript as a jpg
# Will wait for fix so I can remove the following line
#		find "${image_dir}" -name "*.jpg" -size -4k -delete
# Minimal method of getting a proper sequential list to feed img2pdf to produce pdf pages in correct order
		img2pdf `ls -v ${image_dir}/*.jpg` -o "${pdf_dir}" 
		rm -r "${image_dir:?}/"
		clear
	fi
}

open_chapter() {
	scrape_chapter
	convert_imgs_to_pdf
	open_pdf
	cache_session
}

check_dependencies() {
	exit_script=false

	for dependency in "${dependencies[@]}"; do
		if ! command -v "${dependency}" &> /dev/null; then
			print_red "Missing dependency: '${dependency}'"
			exit_script=true
		fi
	done

	if [[ "${exit_script}" == "true" ]]; then
		exit 1
	fi
}

############
# Start up #
############

trap reset_ifs EXIT

check_dependencies

chapter_file_path=$(echo "$(dirname $(realpath $0))/chapters.txt")

if [ ! -f ${chapter_file_path} ]; then
    touch ${chapter_file_path}
fi

main() {
	search_manga
	scrape_mangas
	select_manga
	scrape_chapter_list
	select_chapter
	open_chapter
	input_controls
}

case "${1}" in
	-h|--help)
		show_help
		;;
	-V|--version)
		show_version
		;;
	-u|--update)
		update_script
		;;
	-l|--last-session)
		open_last_session
		;;
	-c|--cache-size)
		show_cache_size
		;;
	-C|--clear-cache)
		clear_cache
		;;
	-?*)	
		unknown_option "${1}"
		;;
	*)
		manga_title_input="${*}"
		main
esac
